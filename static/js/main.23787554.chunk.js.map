{"version":3,"sources":["components/customer/Customer.js","App.js","serviceWorker.js","index.js"],"names":["CustomerList","props","isSmall","useMediaQuery","theme","breakpoints","down","List","title","SimpleList","primaryText","record","name","secondaryText","email","tertiaryText","phone","Datagrid","rowClick","TextField","label","source","EmailField","ChipField","EditButton","CustomerTitle","CustomerEdit","Edit","undoable","TabbedForm","FormTab","TextInput","CustomerCreate","Create","SimpleForm","dataProvider","jsonServerProvider","i18nProvider","polyglotI18nProvider","portugueseMessages","App","Admin","Resource","options","list","edit","create","icon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23787554.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useMediaQuery } from '@material-ui/core';\r\nimport { Create, ChipField, List, Datagrid, TextField, EmailField,\r\n        SimpleForm, TextInput, EditButton, SimpleList, TabbedForm, \r\n        FormTab, Edit, Show } from 'react-admin';\r\n\r\nexport const CustomerList = props => {\r\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    return (\r\n        <List title=\"Consulta Clientes\" {...props}>  \r\n            {isSmall ? (\r\n                <SimpleList\r\n                    primaryText={record => record.name}\r\n                    secondaryText={record => record.email}\r\n                    tertiaryText={record => record.phone}\r\n                />\r\n            ) : (\r\n                <Datagrid rowClick=\"show\">\r\n                    <TextField label=\"Nome\" source=\"name\" />\r\n                    <EmailField label=\"e-mail\" source=\"email\" />\r\n                    <ChipField label=\"Telefone\" source=\"phone\" />\r\n                    <TextField label=\"Observações\" source=\"annotations\" />\r\n                    <EditButton />\r\n                </Datagrid>\r\n            )}           \r\n        </List>\r\n    );    \r\n};\r\n\r\nconst CustomerTitle = ({ record }) => {\r\n    return <span>Cliente {record ? `\"${record.name}\"` : ''}</span>;\r\n};\r\n\r\nexport const CustomerEdit = props => (\r\n    <Edit undoable={false} title={<CustomerTitle />} {...props}>\r\n        <TabbedForm>\r\n            <FormTab label=\"Cadastro\">\r\n                <TextInput label=\"Nome\" source=\"name\" />\r\n                <TextInput label=\"E-mail\" source=\"email\" />\r\n                <TextInput label=\"Telefone\" source=\"phone\" />\r\n                <TextInput label=\"CPF\" source=\"document\" />\r\n            </FormTab>\r\n            <FormTab label=\"Endereço\">\r\n                <TextInput label=\"Rua\" source=\"address.street\" />\r\n                <TextInput label=\"Numero\" source=\"address.number\" />\r\n                <TextInput label=\"Cep\" source=\"address.zip\" />\r\n                <TextInput label=\"Bairro\" source=\"address.neighborhood\" />\r\n                <TextInput label=\"Estado\" source=\"address.state\" />\r\n                <TextInput label=\"Cidade\" source=\"address.city\" />\r\n            </FormTab>\r\n        </TabbedForm>\r\n    </Edit>\r\n);\r\n\r\nexport const CustomerCreate = props => (\r\n    <Create title=\"Cadastrar Novo Cliente\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput label=\"Nome\" source=\"name\" />\r\n            <TextInput label=\"CPF\" source=\"document\" />\r\n            <TextInput label=\"e-mail\" source=\"email\" />\r\n            <TextInput label=\"Telefone\" source=\"phone\" />\r\n            <TextField label=\"Endereço\" />\r\n            <TextInput label=\"Rua\" source=\"address.street\" />\r\n            <TextInput label=\"Numero\" source=\"address.number\" />\r\n            <TextInput label=\"Cep\" source=\"address.zip\" />\r\n            <TextInput label=\"Bairro\" source=\"address.neighborhood\" />\r\n            <TextInput label=\"Estado\" source=\"address.state\" />\r\n            <TextInput label=\"Cidade\" source=\"address.city\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport const CustomerShow = props => {\r\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    return (\r\n        <Show title=\"Consulta Clientes\" {...props}>  \r\n            {isSmall ? (\r\n                <SimpleList\r\n                    primaryText={record => record.name}\r\n                    secondaryText={record => record.email}\r\n                    tertiaryText={record => record.phone}\r\n                />\r\n            ) : (\r\n                <TabbedForm>\r\n                    <FormTab label=\"Cadastro\">\r\n                        <TextField label=\"Nome\" source=\"name\" />\r\n                        <EmailField label=\"E-mail\" source=\"email\" />\r\n                        <TextField label=\"Telefone\" source=\"phone\" />\r\n                        <TextField label=\"CPF\" source=\"document\" />\r\n                    </FormTab>\r\n                    <FormTab label=\"Endereço\">\r\n                        <TextField label=\"Rua\" source=\"address.street\" />\r\n                        <TextField label=\"Numero\" source=\"address.number\" />\r\n                        <TextField label=\"Cep\" source=\"address.zip\" />\r\n                        <TextField label=\"Bairro\" source=\"address.neighborhood\" />\r\n                        <TextField label=\"Estado\" source=\"address.state\" />\r\n                        <TextField label=\"Cidade\" source=\"address.city\" />\r\n                    </FormTab>\r\n                </TabbedForm>\r\n            )}           \r\n        </Show>\r\n    );    \r\n};","import React from 'react';\r\nimport { Admin, Resource } from 'react-admin';\r\nimport jsonServerProvider from 'ra-data-json-server';\r\n\r\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\r\nimport portugueseMessages from 'ra-language-portuguese'\r\n\r\nimport UserIcon from '@material-ui/icons/People';\r\n\r\nimport { CustomerList, CustomerEdit, CustomerCreate } from './components/customer/Customer'\r\n\r\nconst dataProvider = jsonServerProvider('http://localhost:8090/v1');\r\n\r\nconst i18nProvider = polyglotI18nProvider(() => portugueseMessages, 'pt');\r\n\r\nconst App = () => (\r\n  <Admin \r\n    dataProvider={dataProvider} \r\n    i18nProvider={i18nProvider}\r\n    >\r\n    <Resource name=\"customers\" options={{ label: 'Clientes' }} \r\n              list={CustomerList} edit={CustomerEdit} create={CustomerCreate} icon={UserIcon} />\r\n    \r\n  \r\n  </Admin>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}